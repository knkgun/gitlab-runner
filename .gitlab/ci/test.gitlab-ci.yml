include:
- template: Security/Dependency-Scanning.gitlab-ci.yml
- template: Coverage-Fuzzing.gitlab-ci.yml
- template: Security/SAST.gitlab-ci.yml
- template: Security/License-Scanning.gitlab-ci.yml

# Overriding 'Dependency-Scanning.gitlab-ci.yml' template, because
# we need to replace the rules with our own, the same
# as in `.merge_request_pipelines` template.
gemnasium-dependency_scanning:
  rules: !reference [".rules:merge_request_pipelines:no_docs", rules]

# Overriding 'License-Scanning.gitlab-ci.yml' template, because
# we need to replace the rules with our own, the same
# as in `.merge_request_pipelines` template.
license_scanning:
  variables:
    LICENSE_FINDER_CLI_OPTS: '--decisions-file=.gitlab/dependency_decisions.yml'
  rules: !reference [".rules:merge_request_pipelines:no_docs", rules]

# Overriding 'SAST.gitlab-ci.yml' template, because
# we need to replace the rules with our own, the same
# as in `.merge_request_pipelines` template.
gosec-sast:
  rules: !reference [".rules:merge_request_pipelines:no_docs", rules]

# Perform documentation linting on Markdown files
docs lint markdown:
  image: registry.gitlab.com/gitlab-org/gitlab-docs/lint-markdown:alpine-3.13-vale-2.10.2-markdownlint-0.26.0
  stage: test
  extends:
  - .rules:merge_request_pipelines
  - .no_cache_and_dependencies
  needs: []
  script:
  # Lint prose and Markdown
  - make lint-docs VALE_MIN_ALERT_LEVEL=error

# Perform link checks on published HTML files
docs check links:
  image: registry.gitlab.com/gitlab-org/gitlab-docs/lint-html:alpine-3.13-ruby-2.7.2
  stage: test
  extends:
  - .rules:merge_request_pipelines
  - .no_cache_and_dependencies
  needs: []
  script:
  # Prepare docs for build
  - mv docs/ /tmp/gitlab-docs/content/$DOCS_GITLAB_REPO_SUFFIX
  - cd /tmp/gitlab-docs
  # Build HTML from Markdown
  - bundle exec nanoc
  # Check the internal links
  - bundle exec nanoc check internal_links
  # Check the internal anchor links
  - bundle exec nanoc check internal_anchors

check feature flags docs:
  stage: test
  extends:
  - .rules:merge_request_pipelines
  - .no_cache_and_dependencies
  script:
  - cp docs/configuration/feature-flags.md docs/configuration/feature-flags.md.orig
  - make update_feature_flags_docs
  - |
    diff docs/configuration/feature-flags.md.orig docs/configuration/feature-flags.md || (
      echo
      echo "Feature Flags list in documentation is not up-to-date"
      echo "Run 'make update_feature_flags_docs' to update it"
      echo
      exit 1
    )

check modules:
  stage: test
  extends:
  - .rules:merge_request_pipelines:no_docs
  - .no_cache_and_dependencies
  needs:
  - 'prepare done'
  script:
  - make check_modules

check mocks:
  stage: test
  extends:
  - .rules:merge_request_pipelines:no_docs
  - .no_cache_and_dependencies
  needs:
  - 'prepare done'
  script:
  - make check_mocks

check test directives:
  stage: test
  extends:
  - .rules:merge_request_pipelines:no_docs
  - .no_cache_and_dependencies
  needs:
  - 'prepare done'
  script:
  - make check_test_directives

code_quality:
  stage: test
  extends:
  - .rules:merge_request_pipelines:no_docs
  - .no_dependencies
  # Use GOCACHE instead of GOLANGCI_LINT_CACHE
  # to avoid [false lint positives](https://gitlab.com/gitlab-org/gitlab-runner/-/merge_requests/2187#note_373008672)
  - .go-cache
  image: registry.gitlab.com/gitlab-org/ci-cd/runner-tools/runner-linters:v1.27.0-alpine
  needs: []
  allow_failure: true
  variables:
    REPORT_FILE: gl-code-quality-report.json
    LINT_FLAGS: "--color never --deadline 15m"
    OUT_FORMAT: code-climate
    GOLANGLINT_VERSION: "" # Don't add version suffix to Makefile's GOLANGLINT (use plain golangci-lint from image)
  before_script:
  # Ensure the goargs linter plugin is available at .tmp/goargs.so to suit .golangci.yml
  - mkdir .tmp && ln -s /usr/lib/goargs.so .tmp/goargs.so
  # Copy the Docker image's golangci-lint to the location expected by `make lint` so that it is not built
  - cp $(which golangci-lint) .tmp/golangci-lint
  script:
  # Write the code coverage report to gl-code-quality-report.json
  # and print linting issues to stdout in the format: path/to/file:line description
  - make --silent lint | tee ${REPORT_FILE}
  timeout: 15 minutes
  artifacts:
    reports:
      codequality: ${REPORT_FILE}
    paths:
    - ${REPORT_FILE}
    when: always
    expire_in: 7d

.linux test:
  extends:
  - .rules:merge_request_pipelines:no_docs
  - .docker
  - .go-cache
  stage: test
  before_script:
  - make splitic
  artifacts:
    paths:
    - .splitic/
    when: always
    expire_in: 7d
    reports:
      junit: .splitic/junit_*.xml

unit test:
  extends:
  - .linux test
  needs:
  - 'clone test repo'
  - 'prepare done'
  script:
  - >
    splitic test \
      -junit-report .splitic/junit_${CI_NODE_INDEX}.xml \
      -cover-report .splitic/cover_${CI_NODE_INDEX}.profile -cover -coverpkg gitlab.com/gitlab-org/gitlab-runner \
      -env-passthrough ./scripts/envs/allowlist_common.env -env-passthrough ./scripts/envs/allowlist_unix.env \
      ./... \
      -- -ldflags "$(make print_ldflags)"
  parallel: 2

unit test with race:
  extends:
  - unit test
  - .go-cache
  variables:
    CGO_ENABLED: "1"
  allow_failure:
    exit_codes: 99
  script:
  - make splitic
  - >
    splitic test \
      -race \
      -junit-report .splitic/junit_${CI_NODE_INDEX}.xml \
      -cover-report .splitic/cover_${CI_NODE_INDEX}.profile -cover -coverpkg gitlab.com/gitlab-org/gitlab-runner \
      -env-passthrough ./scripts/envs/allowlist_common.env -env-passthrough ./scripts/envs/allowlist_unix.env \
      -fail-exit-code 99 \
      ./... \
      -- -ldflags "$(make print_ldflags)"

integration test:
  extends:
  - .linux test
  needs:
  - 'clone test repo'
  - 'helper images'
  - 'prepare done'
  script:
  - >
    splitic test \
      -junit-report .splitic/junit_${CI_NODE_INDEX}.xml \
      -cover-report .splitic/cover_${CI_NODE_INDEX}.profile -cover -coverpkg gitlab.com/gitlab-org/gitlab-runner \
      -env-passthrough ./scripts/envs/allowlist_common.env -env-passthrough ./scripts/envs/allowlist_unix.env \
      -tags integration \
      ./... \
      -- -ldflags "$(make print_ldflags)"
  parallel: 4

integration test with race:
  extends:
  - integration test
  - .go-cache
  variables:
    CGO_ENABLED: "1"
  allow_failure:
    exit_codes: 99
  script:
  - make splitic
  - >
    splitic test \
      -race \
      -junit-report .splitic/junit_${CI_NODE_INDEX}.xml \
      -cover-report .splitic/cover_${CI_NODE_INDEX}.profile -cover -coverpkg gitlab.com/gitlab-org/gitlab-runner \
      -env-passthrough ./scripts/envs/allowlist_common.env -env-passthrough ./scripts/envs/allowlist_unix.env \
      -tags integration \
      -fail-exit-code 99 \
      ./... \
      -- -ldflags "$(make print_ldflags)"

fuzz variable mask:
  extends:
  - .fuzz_base
  - .rules:merge_request_pipelines:no_docs
  image: golang:1.13
  stage: test
  variables:
    COVFUZZ_SEED_CORPUS: './helpers/trace/testdata/corpus'
  script:
  - apt update && apt install -y clang
  - go get github.com/dvyukov/go-fuzz/go-fuzz && go get github.com/dvyukov/go-fuzz/go-fuzz-build
  - go-fuzz-build -libfuzzer -o fuzz_variable_mask.a ./helpers/trace
  - clang -fsanitize=fuzzer fuzz_variable_mask.a -o fuzz_variable_mask
  - ./gitlab-cov-fuzz run -- ./fuzz_variable_mask -only_ascii=1 -max_len=128 -max_total_time=300

.go-cache-windows_before_script: &go-cache-windows_before_script
- New-Item -Path .gocache-$CI_COMMIT_REF_PROTECTED -Type Directory -Force

.windows test:
  extends:
  - .rules:default-branch-only:no_docs
  - .go-cache-windows
  stage: test
  parallel: 6
  before_script:
  - Set-MpPreference -DisableRealtimeMonitoring $true
  - *go-cache-windows_before_script
  - go install gitlab.com/ajwalker/splitic
  - $env:Path += ";$(go env GOPATH)/bin"
  artifacts:
    paths:
    - .splitic/
    when: always
    expire_in: 7d
  allow_failure:
    exit_codes: 1

.windows unit test:
  extends:
  - .windows test
  parallel: 2
  needs:
  - 'clone test repo'
  - 'prepare done'
  script:
  - splitic test -junit-report .splitic/junit_${WINDOWS_VERSION}_${CI_NODE_INDEX}.xml -quarantined ci/.test-failures.${WINDOWS_VERSION}.txt -cover-report .splitic/cover_${CI_NODE_INDEX}.profile -cover -coverpkg gitlab.com/gitlab-org/gitlab-runner -env-passthrough ./scripts/envs/allowlist_common.env -env-passthrough ./scripts/envs/allowlist_windows.env ./...

.windows integration test:
  extends:
  - .windows test
  parallel: 4
  needs:
  - 'clone test repo'
  - 'prepare done'
  script:
  - splitic test -junit-report .splitic/junit_${WINDOWS_VERSION}_${CI_NODE_INDEX}.xml -quarantined ci/.test-failures.${WINDOWS_VERSION}.txt -cover-report .splitic/cover_${CI_NODE_INDEX}.profile -cover -coverpkg gitlab.com/gitlab-org/gitlab-runner -env-passthrough ./scripts/envs/allowlist_common.env -env-passthrough ./scripts/envs/allowlist_windows.env -tags integration ./...

# Only test the oldest supported version in merge requests,
# but test all versions in the default branch.
windows 1809 unit tests:
  extends:
  - .windows unit test
  - .windows1809
  - .rules:merge_request_pipelines:no_docs

windows 1809 integration tests:
  extends:
  - .windows integration test
  - .windows1809
  - .rules:merge_request_pipelines:no_docs

windows 2004 integration tests:
  extends:
  - .windows integration test
  - .windows2004

windows 20H2 integration tests:
  extends:
  - .windows integration test
  - .windows20H2

git 1.8.3.1:
  extends:
  - .rules:merge_request_pipelines:no_docs
  - .go-cache
  image: centos:7
  stage: test
  variables:
    GOROOT: /usr/local/go
    GOPATH: /go
    CGO_ENABLED: 0
  before_script:
  - yum install -y -q git make && git version
  - curl https://storage.googleapis.com/golang/go1.13.8.linux-amd64.tar.gz | tar zx -C $(dirname "$GOROOT")
  - curl -L https://github.com/git-lfs/git-lfs/releases/download/v${GIT_LFS_VERSION}/git-lfs-linux-amd64-v${GIT_LFS_VERSION}.tar.gz | tar zx -C /usr/bin
  - git-lfs install --skip-repo
  - export PATH=${GOPATH}/bin:${GOROOT}/bin:$PATH
  - source ci/touch_make_dependencies
  script:
  - make git1.8-test

integration_k8s:
  extends:
  - .rules:merge_request_pipelines:no_docs
  - .docker
  needs:
  - 'prepare done'
  stage: test
  services:
  - name: registry.gitlab.com/gitlab-org/cluster-integration/test-utils/k3s-gitlab-ci/releases/v1.16.7-k3s1
    alias: k3s
  before_script:
  - curl k3s:8081?service=k3s > k3s.yaml
  - export KUBECONFIG=$(pwd)/k3s.yaml
  - kubectl version
  - kubectl cluster-info
  script:
  - >
  splitic test \
    -tags integration,kubernetes
    -env-passthrough ./scripts/envs/allowlist_common.env -env-passthrough ./scripts/envs/allowlist_unix.env \
    gitlab.com/gitlab-org/gitlab-runner/executors/kubernetes \
    -- -ldflags "$(make print_ldflags)"
